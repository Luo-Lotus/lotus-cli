#!/bin/bash
npm i lint-staged husky -D
npm set-script prepare "husky install"
npm run prepare
npx husky install
npx husky add .husky/pre-commit "npx lint-staged"
cat>lintstagedrc.json<<EOF
{
    "*.{js,jsx,ts,tsx}": ["prettier --write .", "eslint  --fix"],
    "*.md": ["prettier --write"]
}
EOF
mkdir .github
mkdir .github/workflow
cat>.github/workflow/test-before-merge-pr.yaml<<EOF
name: test-before-merge-pr
# 指定在master分支发生pull_request事件时才触发运行工作流程
on:
    pull_request:
        branches: master
jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            # 拉取项目代码
            - name: Checkout repository
              uses: actions/checkout@v2
            # 下载node
            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '14.x'
            # 安装依赖
            - name: Installing Dependencies
              run: npm install
            # 运行自动化测试
            - name: Running Test
              run: npm run test
EOF
cat>.gitignore<<EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

./
# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/
.idea/
.vscode/

src/request.js
# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
EOF